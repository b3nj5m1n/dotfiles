export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_CACHE_HOME="$HOME/.cache"

if [ $(($RANDOM % 4)) -eq $((1)) ]; then
    pfetch
elif [ $(($RANDOM % 4)) -eq $((1)) ]; then
    homedir_count=$(/usr/bin/env ls -a "$HOME" | /usr/bin/env wc -l)
    if [ -f "$XDG_CACHE_HOME/homedir_count" ]; then
        prev_homedir_count=$(cat "$XDG_CACHE_HOME/homedir_count")
    else
        prev_homedir_count="$homedir_count"
    fi
    if [ "$homedir_count" -gt "$prev_homedir_count" ]; then
        echo "\e[1;33mThe number of files in your home directory has increased from $prev_homedir_count to $homedir_count."
    elif [ "$homedir_count" -lt "$prev_homedir_count" ]; then
        echo "\e[1;32mThe number of files in your home directory has decreased from $prev_homedir_count to $homedir_count."
    fi
    if [ "$homedir_count" -gt 20 ]; then
        echo "\e[1;31mThere are more than 20 files in your home directory."
    fi
    printf "$homedir_count" >  "$XDG_CACHE_HOME/homedir_count"
fi

# The following lines were added by compinstall

zstyle ':completion:*' completer _expand _complete _ignored _correct _approximate
zstyle ':completion:*' completions 1
zstyle ':completion:*' expand prefix suffix
zstyle ':completion:*' glob 1
zstyle ':completion:*' insert-unambiguous true
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' matcher-list 'm:{[:lower:][:upper:]}={[:upper:][:lower:]} r:|[._-]=** r:|=**'
zstyle ':completion:*' max-errors 4
zstyle ':completion:*' menu select=3
zstyle ':completion:*' original true
zstyle ':completion:*' preserve-prefix '//[^/]##/'
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' squeeze-slashes true
zstyle ':completion:*' substitute 1
zstyle ':completion:*' verbose true
zstyle :compinstall filename '/home/b3nj4m1n/.zshrc'

autoload -Uz compinit
compinit -d "$XDG_CACHE_HOME/zsh/zcompdump-$ZSH_VERSION"
# End of lines added by compinstall
# Lines configured by zsh-newuser-install
HISTSIZE=9999999
SAVEHIST=9999999
setopt autocd

# End of lines configured by zsh-newuser-install

##### Prompt #####

# fpath+=$XDG_CONFIG_HOME/zsh/pure
# autoload -U promptinit; promptinit
# zstyle :prompt:pure:prompt color "%c5-hex"
# zstyle :prompt:pure:path color "%c6-hex"
# zstyle :prompt:pure:user color "%c2-hex"
# zstyle :prompt:pure:host color "%c10-hex"
# git:branch
# git:dirty
# git:action
# git:arrow
# git:stash
# execution_time
# prompt pure

# Vi key bindings
bindkey -v
export KEYTIMEOUT=1

# Enable Ctrl + Backspace to delete word backwards
bindkey '^H' backward-kill-word
# Enable deleting last char on a line & going back to the previous one
bindkey -v '^?' backward-delete-char
# Enable skipping words with Ctrl + Arrow Keys
bindkey '^[[1;5D' backward-word
bindkey '^[[1;5C' forward-word
# History
bindkey -M viins '^k' up-line-or-history
bindkey -M viins '^j' down-line-or-history
bindkey -M viins '^r' history-incremental-pattern-search-backward
bindkey -M viins '^f' history-incremental-pattern-search-forward
bindkey -M vicmd '/' history-incremental-pattern-search-backward
bindkey -M vicmd '?' history-incremental-pattern-search-forward
bindkey "^z" history-beginning-search-backward
bindkey "^u" history-beginning-search-forward
# Beginning/End of line in insert mode
bindkey "^a" beginning-of-line
bindkey "^e" end-of-line
# Get into normal mode
bindkey -M viins '^g' vi-cmd-mode

# Function called before each command is executed
function preexec() {
    # Set the window title
    # The first arg passed to this func is the string of the command the user has entered
    echo -n -e "\033]0;$1 - zsh\007"
}

# Alias for reloading the config
alias rl="source ~/.zshrc"

autoload edit-command-line; zle -N edit-command-line
# Space in normal mode to edit current line in editor buffer
bindkey -M vicmd ' ' edit-command-line

# Start ssh agent
# export SSH_AUTH_SOCK=~/.ssh/ssh-agent.sock
# test whether $SSH_AUTH_SOCK is valid
# ssh-add -l 2>/dev/null >/dev/null
# if not valid, then start ssh-agent using $SSH_AUTH_SOCK
# [ $? -ge 2 ] && rm -f "$SSH_AUTH_SOCK" && ssh-agent -a "$SSH_AUTH_SOCK" >/dev/null
# eval `ssh-agent -a $SSH_AUTH_SOCK` &>/dev/null
# Keychain
eval $(keychain --dir "$XDG_CACHE_HOME/keychain" --eval --quiet {{#if ssh_key_name}}{{ssh_key_name}}{{/if}})

# Use starship prompt
eval "$(starship init zsh)"
# Init zoxide (Better navigation than with cd)
eval "$(zoxide init zsh)"
# Init atuin (Better Ctrl + r)
eval "$(atuin init zsh)"
# Init direnv
eval "$(direnv hook zsh)"
# Source common aliases, exports, etc.
# source ~/.config/shrc
# # Use thefuck
# eval "$(thefuck --alias)"

# Syntax highlighting in zsh
# source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
{{#if (eq_string os "nix")}}
source /run/current-system/sw/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
{{/if}}
{{#if (eq_string os "arch")}}
source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
{{/if}}
