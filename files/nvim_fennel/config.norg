@document.meta
title: Neovim Config
description: 
authors: b3nj4m1n
categories: 
created: 2022-05-25
version: 0.0.11
@end

* Definitions
** Global config table
   This is a global table which will be returned at the end of this file. I'm not sure what to do with it yet.
   @code fennel
   (global config { :plugins {} })
   @end
** Modules
   This section holds various imports which will be used later in the config.
   @code fennel
   ; (local nvim (require :vim.api))
   @end
** Function aliases
   Shorter/more intuitive names for some functions.
   @code fennel
   (global nvim-set-opt vim.api.nvim_set_option_value)
   (global get-opt vim.api.nvim_get_option)
   (global expand vim.fn.expand) ; Expand enviornment variables in string
   (global nvim-set-keymap vim.api.nvim_set_keymap)
   (global set-var vim.api.nvim_set_var)
   @end
** Functions
   Custom functions.

   Some of these wrap the aliases from above to provide an easier interface. For example, when setting an option, you have to provide an options table. I do not use these options, so the `set-opt` function automatically calls the underlying function from the neovim api with an additional empty table as an argument.
*** Option management
    @code fennel
    (fn set-opt [option-name option-value]
      "Set nvim option with an empty options table. Wrapper around nvim-set-opt."
      (nvim-set-opt option-name option-value {}))
    (fn set-opts [...]
      "Set multiple options."
      (for [i 1 (length [...]) 2]
        (set-opt (. [...] i) (. [...] (+ 1 i)))))
    @end
*** Keymap management
    @code fennel
    (fn set-keymap-pure [description mode right-side left-side]
      "Set a 'pure' keymap, i.e. no callback"
      (let [opts { :noremap true :silent true :desc description }]
        (nvim-set-keymap mode right-side left-side opts)))
    (fn set-keymap-callback [description mode right-side callback]
      "Set a keymap with a callback."
      (let [opts { :noremap true :silent true :desc description :callback callback }]
        (nvim-set-keymap mode right-side "" opts)))
    (macro set-keymap [description right-side left-side-or-callback]
      "Set keymap with description, default options and either left-side or callback."
      (fn get-description-prefix [s]
        "If description is 'Normal: text text', this function will return 'normal'"
        (string.lower (string.sub s 1 (- (string.find s ":" 1 true) 1))))
      (fn get-description [s]
        "If description is 'Normal: text text', this function will return 'text text'"
        (string.sub s (+ (string.find s ":" 1 true) 2)))
      (local mode (match (get-description-prefix description)
        "normal" "n"
        "visual" "v"
        "terminal" "t"
        ))
      (local description (get-description description))
      (match (type left-side-or-callback)
          "string" '(set-keymap-pure ,description ,mode ,right-side ,left-side-or-callback)
          "table" '(set-keymap-callback ,description ,mode ,right-side ,left-side-or-callback)))
    @end
*** Plugin management
    @code fennel
    (fn add-plugin [name path config setup branch commit optional command requires filetype event after disable]
      "Add plugin to config-local plugin-store."
      (table.insert (. config :plugins) {
        :name name :path path :config config :setup setup
        :branch branch :commit commit :optional optional
        :command command :requires requires :filetype filetype
        :event event :after after :disable disable
      }))
    (macro paq [name path ...]
      (local plugin-config {
        :name name :path path :config nil :setup nil :branch nil :commit nil :optional nil
        :command nil :requires nil :filetype nil :event nil :after nil :disable nil })
      (for [i 1 (length [...]) 2]
        (let [key (. [...] i) value (. [...] (+ 1 i))]
          (tset plugin-config key value)))
      (if (= (. plugin-config :branch) nil) (tset plugin-config :branch "main"))
      (if (= (. plugin-config :optional) nil) (tset plugin-config :optional false))
      (if (= (. plugin-config :disable) nil) (tset plugin-config :disable false))
      '(table.insert (. config :plugins) ,plugin-config))
    (fn init-packer []
      (do (vim.cmd "packadd packer.nvim")
        ((. (require :packer) :startup) {1 (fn []
          (each [_ plugin (ipairs (. (. config :plugins) :plugins))]
            (use {
              1 (. plugin :path)
              :config (. plugin :config)
              :setup (. plugin :setup)
              :branch (. plugin :branch)
              :commit (. plugin :commit)
              :opt (. plugin :optional)
              :cmd (. plugin :command)
              :requires (. plugin :requries)
              :ft (. plugin :filetype)
              :event (. plugin :event)
              :after (. plugin :after)
              :disable (. plugin :disable)
            })
          )
        )})))
    ;(paq "test" "test/test" :filetype "norg")
    ; (init-packer [ :test :test ])
    (init-packer)
    @end

* Options
  This section sets various options.
** Sane defaults
   These are what I would set as the defaults for nvim. Nothing specific to me.
   @code fennel
   (set-var :syntax true)
   (set-opts
     :termguicolors  true  ; Enable 24-bit color
     :backup         false ; Don't create a backup file before overwriting a file
     :completeopt    "noinsert,menuone,noselect" ; Do not insert anything until the user selects it; Show the menu when there is just one match; Force the user to select something from the menu
     :encoding       "UTF-8" ; Set encoding to UTF-8
     :errorbells     false ; Disable error bell & screen flashing
     :guicursor      "n-v-c:block-Cursor/lCursor-blinkon0,i-ci:ver25-Cursor/lCursor,r-cr:hor20-Cursor/lCursor" ; Cursor shapes
     :hidden         true ; Don't kill buffers, when exiting, keep them around in the background
     :hlsearch       false ; No highlighting on search
     :ignorecase     true ; Ignore case in searches
     :inccommand     :split ; Show preview of substitute
     :incsearch      true ; Directly jump to next match when searching
     :mouse          :a ; Enable mouse support
     :pumheight      20 ; Max completion menu height
     :sessionoptions "blank,buffers,curdir,folds,help,options,tabpages,winsize,resize,winpos,terminal" ; Session management options
     :shortmess      (.. (get-opt :shortmess) :c) ; Avoid prompts for auto-complete
     :showmode       false ; Hide the -- INSERT -- at the bottom
     :smartcase      true ; Don't ignore case in searches when using case in search
     :swapfile       false ; Don't create swapfiles
     :undodir        (expand "$XDG_DATA_HOME/nvim/undodir") ; File to store undo stacks in
     :cursorcolumn   false ; Indicate current column
     :cursorline     true ; Indicate current line
     :foldexpr       "nvim_treesitter#foldexpr()" ; Auto fold based on treesitter
     :foldmethod     "expr" ; Auto fold method set to syntax (Determine folds based on file specific syntax)
     :foldnestmax    20 ; Deepest possible fold
     :number         true ; Enable line numbers
     :smartindent    true ; Automatically indent on a new line
     :undofile       true ; Keep a file with the undo stack
     :shiftwidth     4 ; Affects <<, >>, and auto indent
     :softtabstop    4 ; Number of spaces a <Tab> accounts for when editing
     :tabstop        4 ; How many spaces a <Tab> in a file accounts for
     :scrolloff      2 ; Start scrolling when 2 lines from top/bottom, i.e. always show 2 lines of context
     :sidescrolloff  4 ; Same as above but for horizontal scrolling
     :signcolumn     "yes" ; Always dispaly the signcolumn at the left side
   )
   @end
** Preferences
   @code fennel
   (set-var :mapleader " ")
   (set-opts
     :foldlevel      99 ; The higher, the more folded regions are open (0 = all folds closed)
     :foldlevelstart 99 ; Inital fold level; close all folds when opening a new buffer
     :laststatus     3 ; Global statusbar
     :wrap           false ; Long lines are displayed as one line (Horizontal scrolling required)
     :relativenumber true ; Enable relative line numbers
     :expandtab      true ; Insert spaces instead of tab
     :spelllang      "en_GB,de,es,cjk" ; Dictionarys to use for checking spelling
     :list           true ; Show invisible characters
     :listchars     "eol:↴,nbsp:+,space:⋅,tab:⟼ ,trail:-" ; Invisible character and what character to show for it
   )
   @end

* Keymaps
** General
   @code fennel
   (set-keymap "Visual: Keep visual selection after indenting"
     ">" ">gv")
   (set-keymap "Visual: Keep visual selection after indenting"
     "<" "<gv")
   (set-keymap "Terminal: Exit to normal mode"
     "<C-g>" "<C-\\><C-n>")
   (set-keymap "Normal: Source current file"
     "<C-s>" ":source %<CR>")
   @end
** Tabs
   @code fennel
   (set-keymap "Normal: Switch to previous tab"
     "<C-h>" ":tabprevious<CR>")
   (set-keymap "Normal: Switch to next tab"
     "<C-l>" ":tabnext<CR>")
   @end
** Splits
   @code fennel
   (set-keymap "Normal: Create vertical split"
     "<leader>wv" ":vsplit<CR>")
   (set-keymap "Normal: Create horizontal split"
     "<leader>ws" ":split<CR>")
   (set-keymap "Normal: Move to split on the left"
     "<leader>wh" "<C-W>h")
   (set-keymap "Normal: Move to split on the bottom"
     "<leader>wj" "<C-W>j")
   (set-keymap "Normal: Move to split on the top"
     "<leader>wk" "<C-W>k")
   (set-keymap "Normal: Move to split on the right"
     "<leader>wl" "<C-W>l")
   @end
** Line highlighting
   @code fennel
   (set-keymap "Normal: Toggle highlight on the current line"
     "<leader>hl" ":set cursorline!<CR>")
   (set-keymap "Normal: Toggle highlight on the current line"
     "<leader>hc" ":set cursorcolumn!<CR>")
   @end


* Return config table
  @code fennel
  config
  @end
