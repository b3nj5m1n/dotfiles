# ---------- General Config ----------

# Set prefix
set-option -g prefix C-y
# Set default shell
set -g default-shell /bin/zsh
# Set default command to avoid "command not found: append_path"
set-option -g default-command '/bin/zsh'
# Set default terminal
# set -g default-terminal "tmux-256color"
set -g default-terminal "tmux-256color-full"
# Enable RGB with alacritty
set -ag terminal-overrides ",alacritty:RGB"
# Enable 256 colors
set -ga terminal-overrides ',*:Tc'
# Enable changing of cursor shape
set -ga terminal-overrides '*:Ss=\E[%p1%d q:Se=\E[ q'
# Enable mouse support
set -g mouse on
# Scrollback
set -g history-limit 10000
# Searching
set -g wrap-search on
# No lag after ESC.
set -sg escape-time 0
# Time (ms) between key presses to be considered part of a chain
set -g repeat-time 300
# String shown on titlebars or programs such as `xwininfo`
set -g set-titles on
# Title format
set -g set-titles-string "#T"
# Name windows with <prefix>, (sessions with <prefix>$)
set -g automatic-rename on
# Start indices from 1
set -g base-index 1
set -g pane-base-index 1
set -g renumber-windows on
set-window-option -g mode-keys vi

# Neovim told me to do this
set-option -g focus-events on


# ---------- Keybindings ----------
# -r means commands can be executed as part of a chain
# -n means the prefix is not used

# Unbind default C-b
unbind-key C-b
# Send the literal prefix when pressing it twice
bind-key C-a send-prefix

# reload config
bind r source-file ~/.config/tmux/tmux.conf \; display-message "Config reloaded!"

# Split window horizontally
bind-key v split-window -h -c "#{pane_current_path}"
# Split window vertically
bind-key s split-window -v -c "#{pane_current_path}"

# Use vim keys to switch panes
bind -r C-h select-pane -L
bind -r C-j select-pane -D
bind -r C-k select-pane -U
bind -r C-l select-pane -R

# Vim keys to switch windows
bind -r h  previous-window
bind -r l next-window

# Kill current pane
bind -r x kill-pane
# Kill all except current pane
bind C-x kill-pane -a

# Resize panes with <prefix>Ctrl-{z,u,i,o}.  Omit/adjust the number for
# finer adjustments.
bind -r C-z resize-pane -L 5
bind -r C-u resize-pane -D 5
bind -r C-i resize-pane -U 5
bind -r C-o resize-pane -R 5

# Toggle status line visibility
bind C-s set-option status

# Toggle fullscreen on pane
bind -r C-f resize-pane -Z

# Enter copy-mode with Ctrl + Space
bind -n C-Space copy-mode

bind -n C-q kill-session

# Vim copy-paste behaviour using the clipboard
bind -T copy-mode-vi v send-keys -X begin-selection
# bind -T copy-mode-vi y send-keys -X copy-selection
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'
bind -T copy-mode-vi r send-keys -X rectangle-toggle

# ---------- Colors ----------
# Default window colours are inherited from the underlying terminal
set -g window-style "bg={{ colors.bg }},fg=default"
set -g window-active-style "bg={{ colors.bg }},fg=default"

# Pane styles
set -g pane-border-style "bg={{ colors.bg }},fg={{ colors.bg_dim }}"
set -g pane-active-border-style "bg={{ colors.bg }},fg={{ colors.c5 }}"

# Copy mode
set -g mode-style "bg={{ colors.c5 }},fg={{ colors.fg }},bold,italics"

# Status line
set -g message-style "bg=default,fg=default,bold"

# ---------- Status Bar ----------
# Interval to update status bar in seconds
set -g status-interval 120

# Status bar general options about placement and overall style.
set -g status on
set -g status-style "fg={{ colors.prm }},bg={{ colors.bg }}"
set -g status-position bottom
set -g status-justify left # this concerns the window list

set -g status-left-length "100"
set -g status-right-length "100"

# Window status
set -g window-status-separator ""
set -g window-status-format " #I #W "
set -g window-status-current-format " #I#[bold] #W "
set -g window-status-activity-style ""
set -g window-status-bell-style "fg=colour1,bg=default"
set -g window-status-style "fg={{ colors.fg }},bg={{ colors.bg }}"
set -g window-status-current-style "fg={{ colors.fg }},bg={{ colors.pink }}"
set -g window-status-last-style ""

# Status left and right
set -g status-right "#(/usr/bin/scripts/tmuxright.sh)"
set -g status-left "#(/usr/bin/scripts/tmuxleft.sh)"

# Partially based on:
# https://gitlab.com/protesilaos/cpdfd/-/blob/master/tmux/.tmux.conf
# https://gist.github.com/spicycode/1229612

# ---------- Plugins ----------

# List of plugins
# set -g @plugin 'tmux-plugins/tpm'
# set -g @plugin 'Morantron/tmux-fingers'
# set -g @fingers-key K
# set -g @plugin 'schasse/tmux-jump'
# set -g @jump-key 'f'
# set -g @plugin 'tmux-plugins/tmux-yank'

# # Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
# if "test ! -d ~/.tmux/plugins/tpm" \
#    "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm'"
# run -b '~/.tmux/plugins/tpm/tpm'
